name: Build APK для Android

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Позволяет запускать рабочий процесс вручную через интерфейс GitHub

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Получение кода
      uses: actions/checkout@v4

    - name: Установка Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Установка Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Настройка Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: '9477386' # Последняя версия cmdline-tools
        packages: 'build-tools;31.0.0,platforms;android-31,platform-tools'

    - name: Проверка структуры проекта
      run: |
        mkdir -p .github/scripts
        if [ ! -f ".github/scripts/test_build.sh" ]; then
          cat > .github/scripts/test_build.sh << 'EOL'
#!/bin/bash
echo "Тестирование процесса сборки APK"
echo "=========================="
if [ ! -d "data/Details" ]; then
  echo "Создаем директорию для деталей..."
  mkdir -p data/Details
fi
if [ ! -f "buildozer.spec" ]; then
  echo "Ошибка: Файл buildozer.spec не найден!"
  exit 1
fi
if [ ! -f "main.py" ]; then
  echo "Ошибка: Файл main.py не найден!"
  exit 1
fi
if [ ! -f ".github/requirements.txt" ]; then
  echo "Ошибка: Файл .github/requirements.txt не найден!"
  exit 1
fi
if [ ! -f ".github/workflows/build.yml" ]; then
  echo "Ошибка: Файл .github/workflows/build.yml не найден!"
  exit 1
fi
echo "Все необходимые файлы найдены."
echo "Структура проекта корректна для сборки APK через GitHub Actions."
echo "=========================="
echo "Для локальной сборки APK используйте команду: buildozer android debug"
echo "=========================="
EOL
        fi
        chmod +x .github/scripts/test_build.sh
        .github/scripts/test_build.sh

    - name: Создание директорий для данных приложения
      run: |
        mkdir -p data/Details
        echo "Структура данных приложения создана"

    - name: Создание тестовых данных для приложения
      run: |
        mkdir -p data/Details/Двигатель
        mkdir -p data/Details/Бак
        mkdir -p data/Details/Модуль
        
        echo '{
          "size": {"x": 1, "y": 1},
          "parts": [
            {
              "n": "Двигатель",
              "p": {"x": 0, "y": 0},
              "o": {"x": 0, "y": 0, "z": 0},
              "B": {"Активен": true},
              "N": {
                "engine_type": "liquid",
                "thrust": 250.0,
                "isp": 320.5,
                "fuel_consumption": 12.8,
                "enabled": true
              }
            }
          ]
        }' > data/Details/Двигатель/Blueprint.txt
        
        echo "1.59.15" > data/Details/Двигатель/Version.txt
        
        echo '{
          "size": {"x": 1, "y": 1},
          "parts": [
            {
              "n": "Бак",
              "p": {"x": 0, "y": 0},
              "o": {"x": 0, "y": 0, "z": 0},
              "B": {"Активен": true},
              "N": {
                "type": "fuel_tank",
                "capacity": 800.0,
                "mass": 120.0
              }
            }
          ]
        }' > data/Details/Бак/Blueprint.txt
        
        echo "1.59.15" > data/Details/Бак/Version.txt
        
        echo '{
          "size": {"x": 1, "y": 1},
          "parts": [
            {
              "n": "Модуль",
              "p": {"x": 0, "y": 0},
              "o": {"x": 0, "y": 0, "z": 0},
              "B": {"Активен": true},
              "N": {
                "type": "command_pod",
                "crew_capacity": 3,
                "has_life_support": true
              }
            }
          ]
        }' > data/Details/Модуль/Blueprint.txt
        
        echo "1.59.15" > data/Details/Модуль/Version.txt
        
        echo "Тестовые данные созданы"

    - name: Диагностика buildozer.spec
      run: |
        echo "Текущая директория:"
        pwd
        echo "Содержимое текущей директории:"
        ls -la
        echo "Проверка содержимого buildozer.spec:"
        if [ -f "buildozer.spec" ]; then
          echo "Содержимое buildozer.spec:"
          cat buildozer.spec
          echo "Создание нового файла buildozer.spec:"
          cat > buildozer.spec << 'EOL'
[app]
title = Rocket_Editor
package.name = rocket_editor
package.domain = org.example
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,json,txt
source.include_patterns = data/**
source.exclude_dirs = tests, bin, data/.git, __pycache__, .buildozer
version=1.0
requirements = python3,kivy==2.1.0,pillow,json5,plyer
orientation = portrait
fullscreen = 0

# Android specific
android.permissions = WRITE_EXTERNAL_STORAGE, READ_EXTERNAL_STORAGE
android.api = 31
android.ndk = 23b
android.minapi = 21
android.arch = arm64-v8a, armeabi-v7a
android.buildtools_version = 31.0.0
android.androidx = True
android.presplash_color = #FFFFFF

# Buildozer
[buildozer]
log_level = 2
warn_on_root = 1
build_dir = ./.buildozer
bin_dir = ./bin
skip_update = True
EOL
          echo "Новый файл buildozer.spec создан"
          echo "Проверка нового файла buildozer.spec:"
          cat buildozer.spec
        else
          echo "Файл buildozer.spec не существует, создаем новый:"
          cat > buildozer.spec << 'EOL'
[app]
title = Rocket_Editor
package.name = rocket_editor
package.domain = org.example
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,json,txt
source.include_patterns = data/**
source.exclude_dirs = tests, bin, data/.git, __pycache__, .buildozer
version=1.0
requirements = python3,kivy==2.1.0,pillow,json5,plyer
orientation = portrait
fullscreen = 0

# Android specific
android.permissions = WRITE_EXTERNAL_STORAGE, READ_EXTERNAL_STORAGE
android.api = 31
android.ndk = 23b
android.minapi = 21
android.arch = arm64-v8a, armeabi-v7a
android.buildtools_version = 31.0.0
android.androidx = True
android.presplash_color = #FFFFFF

# Buildozer
[buildozer]
log_level = 2
warn_on_root = 1
build_dir = ./.buildozer
bin_dir = ./bin
skip_update = True
EOL
          echo "Новый файл buildozer.spec создан"
          ls -la
          cat buildozer.spec
        fi
    
    - name: Проверка main.py
      run: |
        echo "Проверка main.py:"
        if [ -f "main.py" ]; then
          echo "Файл main.py существует"
        else
          echo "Файл main.py не существует, создаем пустой файл"
          touch main.py
        fi

    - name: Проверка requirements.txt
      run: |
        echo "Проверка .github/requirements.txt:"
        if [ -f ".github/requirements.txt" ]; then
          echo "Файл .github/requirements.txt существует"
          cat .github/requirements.txt
        else
          echo "Файл .github/requirements.txt не существует, создаем новый"
          mkdir -p .github
          echo "kivy==2.1.0" > .github/requirements.txt
          echo "cython==0.29.33" >> .github/requirements.txt
          echo "pillow" >> .github/requirements.txt
          echo "json5" >> .github/requirements.txt
          echo "plyer" >> .github/requirements.txt
        fi

    - name: Кэширование зависимостей Buildozer
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer
          .buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-

    - name: Установка зависимостей для сборки
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          build-essential \
          git \
          python3 \
          python3-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libgstreamer1.0 \
          gstreamer1.0-plugins-base \
          gstreamer1.0-plugins-good \
          libgstreamer-plugins-base1.0-dev

    - name: Настройка Buildozer Android SDK
      run: |
        # Настраиваем переменные для Buildozer
        export ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        # Создаем simlink для Buildozer
        mkdir -p ~/.buildozer/android/platform
        ln -sf $ANDROID_SDK_ROOT ~/.buildozer/android/platform/android-sdk
        
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_HOME: $ANDROID_HOME"
        ls -la $ANDROID_SDK_ROOT
        ls -la $ANDROID_SDK_ROOT/build-tools
        ls -la $ANDROID_SDK_ROOT/platform-tools
        ls -la ~/.buildozer/android/platform

    - name: Установка Cython и Buildozer
      run: |
        pip install --upgrade pip
        pip install cython==0.29.33
        pip install buildozer==1.4.0
        pip install -r .github/requirements.txt
  - name: Создание минимального проекта
  run: |
    echo "Создание минимального проекта для тестирования:"
    
    echo "from kivy.app import App
from kivy.uix.label import Label

class RocketEditorApp(App):
    def build(self):
        return Label(text='Rocket Editor')

if __name__ == '__main__':
    RocketEditorApp().run()" > main.py
    
    echo "__version__ = '1.0'" > version.py
    
    echo "[app]
title = Rocket_Editor
package.name = rocket_editor
package.domain = org.example
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,json,txt
source.include_patterns = data/**
source.exclude_dirs = tests, bin, data/.git, __pycache__, .buildozer
version.regex = __version__ = ['\\\"'](.*)['\\\"']
version.filename = %(source.dir)s/version.py
requirements = python3,kivy==2.1.0,pillow,json5,plyer
orientation = portrait
fullscreen = 0

# Android specific
android.permissions = WRITE_EXTERNAL_STORAGE, READ_EXTERNAL_STORAGE
android.api = 31
android.ndk = 23b
android.minapi = 21
android.arch = arm64-v8a, armeabi-v7a
android.buildtools_version = 31.0.0
android.androidx = True
android.presplash_color = #FFFFFF

# Buildozer
[buildozer]
log_level = 2
warn_on_root = 1
build_dir = ./.buildozer
bin_dir = ./bin
skip_update = True" > buildozer.spec
    
    echo "Файлы созданы:"
    ls -la
    echo "Содержимое main.py:"
    cat main.py
    echo "Содержимое version.py:"
    cat version.py
    echo "Содержимое buildozer.spec:"
    cat buildozer.spec

- name: Сборка APK для Android
  run: |
    buildozer -v -f android debug
    echo "APK сборка завершена"

    - name: Загрузка артефакта APK
      uses: actions/upload-artifact@v4
      with:
        name: rocket-editor-app
        path: bin/rocketeditor-*-debug.apk
        if-no-files-found: error

    - name: Информация о созданном APK
      run: |
        ls -la bin/
        echo "Размер APK:"
        du -h bin/*.apk
